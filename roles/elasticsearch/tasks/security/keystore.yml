---
#---------------creating Keystore---------------------
- name: create elasticsearch keystore
  become: true
  command: >
   {{ es_home }}/bin/elasticsearch-keystore create
  args:
    creates: {{ es_conf_dir }}/elasticsearch.keystore


#you can change these variables from inside the defaults/main
#es_home: /usr/share/elasticsearch/
#es_conf_dir: /etc/elasticsearch

  environment:
    ES_PATH_CONF: "{{ es_conf_dir }}"


- name: set elasticsearch keystore permissions
  become: yes
  file: state=file path={{ es_conf_dir}}/elasticsearch.keystore owner={{ es_owner }} group= {{ es_group }} mode= {{ es_mode }}

- name: check if elasticsearch keystore is setup
  become: true
  command: >
    {{ es_home }}/bin/elasticsearch-keystore list
  registre: list_keystore
  change_when: False
  environment:
    ES_PATH_CONF: "{{ es_conf_dir }}"
  check_mode: no

- name: create bootstrap password for elastic user
  become: yes
  shell: echo "{{ es_api_basic_auth_password }}" | {{ es_home }}/bin/elasticsearch-keystore add -x 'bootstrap.password'
  when:
    - es_api_basic_auth_username is defined and list_keystore is defined and es_api_basic_auth_username == 'elastic' and 'bootstrap.password' not in list_keystore.stdout_lines
  environment:
    ES_PATH_CONF: "{{ es_conf_dir }}"
  no_log: true


#check_mode: no ,it allows the task to run in normal even if we run the playbook in dry mode the task is run.
#Using Ansible's dry run feature enables users to execute a playbook without making changes to the servers. It uses the built-in check mode to proof a playbook for errors before execution
#registre module is used to registre the output of something in this case the registre of command.
#change_when: False to never report a change status in this step
#see the default/main.yml
#es_group: elasticsearch
#es_owner: root
#es_mode: 0660

#------------------------including builtin user setup----------------

- name: including builtin user setup
  include: setup_builtin_user.yml

